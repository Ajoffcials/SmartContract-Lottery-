{
  "address": "0xAE198c0628A947dBA4DB440840F1a94a33483C8D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFalied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playersLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "IdRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerIndex",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43c735073c6becb6b727a9621147075a008e4b654384890c5414f12f80df8930",
  "receipt": {
    "to": null,
    "from": "0xc6Af49a85cb88cEaD96A31d50D94D220d3712AFa",
    "contractAddress": "0xAE198c0628A947dBA4DB440840F1a94a33483C8D",
    "transactionIndex": 152,
    "gasUsed": "1301720",
    "logsBloom": "0x
    "blockHash": "0x9415f5159f398170fcb4cf100b22344b6581134ea9c18f4247b5dfe2129597dc",
    "transactionHash": "0x43c735073c6becb6b727a9621147075a008e4b654384890c5414f12f80df8930",
    "logs": [],
    "blockNumber": 4942202,
    "cumulativeGasUsed": "27706544",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "5790",
    "2500000",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "0d1dc1578588360fe4c087aac38ed1c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFalied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__upKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"IdRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerIndex\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//Raffle\\n//Enter the lottery\\n//pick a random winner\\n//winner to be selected every x minutes\\n//  chainlink Oracle\\n\\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.7;\\n//import\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nerror Raffle__NotEnoughEth();\\nerror Raffle__TransferFalied();\\nerror Raffle__NotOpen();\\nerror Raffle__upKeepNotNeeded(\\n    uint256 balance,\\n    uint256 playersLength,\\n    uint256 raffleState\\n);\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatible {\\n    //type\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    //state variable\\n    uint256 private immutable enteranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable COORDINATOR;\\n    bytes32 private immutable s_keyhash;\\n    uint64 private i_subscriptionId;\\n    uint16 private constant REQUESTCONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUMWORDS = 1;\\n    uint256 private immutable i_interval;\\n    //lottery variables\\n    address payable private s_recentWinner;\\n    RaffleState private s_RaffleState;\\n    uint256 private s_lastTimeStamp;\\n    //events\\n    event RaffleEnter(address indexed player);\\n    event IdRequest(uint256 indexed id);\\n    event winnerPicked(address indexed winner);\\n\\n    //constructor\\n    constructor(\\n        address _vrfCoordinator, // CONTRACTADDRESS\\n        uint256 _entranceFee,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit,\\n        uint256 _interval\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n        enteranceFee = _entranceFee;\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        s_keyhash = _keyHash;\\n        i_subscriptionId = _subscriptionId;\\n        i_callbackGasLimit = _callbackGasLimit;\\n        s_RaffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = _interval;\\n    }\\n\\n    //function\\n    function enterRaffle() public payable {\\n        if (msg.value < enteranceFee) {\\n            revert Raffle__NotEnoughEth();\\n        }\\n        if (s_RaffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        bool isOpen = (s_RaffleState == RaffleState.OPEN);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayer = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upkeepNeeded = (isOpen && timePassed && hasPlayer && hasBalance);\\n        return (upkeepNeeded, \\\"\\\");\\n    }\\n\\n    // function pickRandomWinner() external {}\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__upKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_RaffleState)\\n            );\\n        }\\n        s_RaffleState = RaffleState.CALCULATING;\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            s_keyhash,\\n            i_subscriptionId,\\n            REQUESTCONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUMWORDS\\n        );\\n        emit IdRequest(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal virtual override {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[winnerIndex];\\n        s_recentWinner = recentWinner;\\n        s_RaffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        s_players = new address payable[](0);\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFalied();\\n        }\\n        emit winnerPicked(recentWinner);\\n    }\\n\\n    //view and pure\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return enteranceFee;\\n    }\\n\\n    function getPlayers(uint256 _playerIndex) public view returns (address) {\\n        address payable[] memory cheapPlayer = s_players;\\n        return cheapPlayer[_playerIndex];\\n    }\\n\\n    function getWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (uint256) {\\n        return uint256(s_RaffleState);\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUMWORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUESTCONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getCordinator() public view returns (VRFCoordinatorV2Interface) {\\n        return COORDINATOR;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint256) {\\n        return i_subscriptionId;\\n    }\\n}\\n\",\"keccak256\":\"0xb3bab2f4d14221f08b267e31081151a5aeb51ffff169f3995e6719bd3bf06859\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001971380380620019718339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e0818152505082600160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508163ffffffff166101008163ffffffff168152505060006001601c6101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061012081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161159a620003d7600039600081816108ef015261099c01526000610729015260006106ef0152600081816106b301526109ec01526000818161037601526104850152600081816103c50152610419015261159a6000f3fe6080604052600436106100e85760003560e01c806353a2c19a1161008a57806391ad27b41161005957806391ad27b4146102c6578063de3d9fb7146102f1578063f496efa81461031c578063fd6673f514610347576100e8565b806353a2c19a146102075780635f1b0fd8146102325780636e04ff0d1461025d5780638e7ea5b21461029b576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063460e2049146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190610d0d565b60405180910390f35b34801561012457600080fd5b5061012d61039a565b60405161013a9190610d0d565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610ec1565b6103c3565b005b610174610483565b005b34801561018257600080fd5b5061018b6105f2565b6040516101989190610d0d565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610f78565b6105fc565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190610fc5565b6107e2565b6040516101fe9190611033565b60405180910390f35b34801561021357600080fd5b5061021c610891565b6040516102299190610d0d565b60405180910390f35b34801561023e57600080fd5b506102476108a0565b6040516102549190610d0d565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190611103565b6108ad565b6040516102929291906111e6565b60405180910390f35b3480156102a757600080fd5b506102b061096e565b6040516102bd9190611033565b60405180910390f35b3480156102d257600080fd5b506102db610998565b6040516102e89190610d0d565b60405180910390f35b3480156102fd57600080fd5b506103066109c0565b6040516103139190610d0d565b60405180910390f35b34801561032857600080fd5b506103316109e8565b60405161033e9190611275565b60405180910390f35b34801561035357600080fd5b5061035c610a10565b6040516103699190610d0d565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006001601c9054906101000a900460ff1660018111156103be576103bd611290565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161046c9291906112bf565b60405180910390fd5b61047f8282610a1c565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104dd576040517fa10e43c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104f1576104f0611290565b5b6001601c9054906101000a900460ff16600181111561051357610512611290565b5b1461054a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610616604051806020016040528060008152506108ad565b5090508061068557476000805490506001601c9054906101000a900460ff16600181111561064757610646611290565b5b6040517f43df4e3d00000000000000000000000000000000000000000000000000000000815260040161067c939291906112e8565b60405180910390fd5b600180601c6101000a81548160ff021916908360018111156106aa576106a9611290565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900467ffffffffffffffff1660037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161076a959493929190611397565b6020604051808303816000875af1158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906113ff565b9050807fc0acb560142e88bce39cf5cd1656ecc6992140c4ecb6fb9c662ec13c0b23cdac60405160405180910390a250505050565b600080600080548060200260200160405190810160405280929190818152602001828054801561086757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161081d575b505050505090508083815181106108815761088061142c565b5b6020026020010151915050919050565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060008060018111156108c6576108c5611290565b5b6001601c9054906101000a900460ff1660018111156108e8576108e7611290565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261091c919061148a565b1190506000806000805490501190506000804711905083801561093c5750825b80156109455750815b801561094e5750805b955085604051806020016040528060008152509550955050505050915091565b6000600160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000808054905082600081518110610a3757610a3661142c565b5b6020026020010151610a4991906114ed565b90506000808281548110610a6057610a5f61142c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001601c6101000a81548160ff02191690836001811115610af457610af3611290565b5b021790555042600281905550600067ffffffffffffffff811115610b1b57610b1a610d7e565b5b604051908082528060200260200182016040528015610b495781602001602082028036833780820191505090505b5060009080519060200190610b5f929190610c4d565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b869061154f565b60006040518083038185875af1925050503d8060008114610bc3576040519150601f19603f3d011682016040523d82523d6000602084013e610bc8565b606091505b5050905080610c03576040517f75073d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610cc6579160200282015b82811115610cc55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c6d565b5b509050610cd39190610cd7565b5090565b5b80821115610cf0576000816000905550600101610cd8565b5090565b6000819050919050565b610d0781610cf4565b82525050565b6000602082019050610d226000830184610cfe565b92915050565b6000604051905090565b600080fd5b600080fd5b610d4581610cf4565b8114610d5057600080fd5b50565b600081359050610d6281610d3c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610db682610d6d565b810181811067ffffffffffffffff82111715610dd557610dd4610d7e565b5b80604052505050565b6000610de8610d28565b9050610df48282610dad565b919050565b600067ffffffffffffffff821115610e1457610e13610d7e565b5b602082029050602081019050919050565b600080fd5b6000610e3d610e3884610df9565b610dde565b90508083825260208201905060208402830185811115610e6057610e5f610e25565b5b835b81811015610e895780610e758882610d53565b845260208401935050602081019050610e62565b5050509392505050565b600082601f830112610ea857610ea7610d68565b5b8135610eb8848260208601610e2a565b91505092915050565b60008060408385031215610ed857610ed7610d32565b5b6000610ee685828601610d53565b925050602083013567ffffffffffffffff811115610f0757610f06610d37565b5b610f1385828601610e93565b9150509250929050565b600080fd5b60008083601f840112610f3857610f37610d68565b5b8235905067ffffffffffffffff811115610f5557610f54610f1d565b5b602083019150836001820283011115610f7157610f70610e25565b5b9250929050565b60008060208385031215610f8f57610f8e610d32565b5b600083013567ffffffffffffffff811115610fad57610fac610d37565b5b610fb985828601610f22565b92509250509250929050565b600060208284031215610fdb57610fda610d32565b5b6000610fe984828501610d53565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101d82610ff2565b9050919050565b61102d81611012565b82525050565b60006020820190506110486000830184611024565b92915050565b600080fd5b600067ffffffffffffffff82111561106e5761106d610d7e565b5b61107782610d6d565b9050602081019050919050565b82818337600083830152505050565b60006110a66110a184611053565b610dde565b9050828152602081018484840111156110c2576110c161104e565b5b6110cd848285611084565b509392505050565b600082601f8301126110ea576110e9610d68565b5b81356110fa848260208601611093565b91505092915050565b60006020828403121561111957611118610d32565b5b600082013567ffffffffffffffff81111561113757611136610d37565b5b611143848285016110d5565b91505092915050565b60008115159050919050565b6111618161114c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a1578082015181840152602081019050611186565b60008484015250505050565b60006111b882611167565b6111c28185611172565b93506111d2818560208601611183565b6111db81610d6d565b840191505092915050565b60006040820190506111fb6000830185611158565b818103602083015261120d81846111ad565b90509392505050565b6000819050919050565b600061123b61123661123184610ff2565b611216565b610ff2565b9050919050565b600061124d82611220565b9050919050565b600061125f82611242565b9050919050565b61126f81611254565b82525050565b600060208201905061128a6000830184611266565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006040820190506112d46000830185611024565b6112e16020830184611024565b9392505050565b60006060820190506112fd6000830186610cfe565b61130a6020830185610cfe565b6113176040830184610cfe565b949350505050565b6000819050919050565b6113328161131f565b82525050565b600067ffffffffffffffff82169050919050565b61135581611338565b82525050565b600061ffff82169050919050565b6113728161135b565b82525050565b600063ffffffff82169050919050565b61139181611378565b82525050565b600060a0820190506113ac6000830188611329565b6113b9602083018761134c565b6113c66040830186611369565b6113d36060830185611388565b6113e06080830184611388565b9695505050505050565b6000815190506113f981610d3c565b92915050565b60006020828403121561141557611414610d32565b5b6000611423848285016113ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149582610cf4565b91506114a083610cf4565b92508282039050818111156114b8576114b761145b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114f882610cf4565b915061150383610cf4565b925082611513576115126114be565b5b828206905092915050565b600081905092915050565b50565b600061153960008361151e565b915061154482611529565b600082019050919050565b600061155a8261152c565b915081905091905056fea2646970667358221220557f9c7f9a7234d2b66bb824419052cd10023e1c979f523665bee8b59a59cb8c64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806353a2c19a1161008a57806391ad27b41161005957806391ad27b4146102c6578063de3d9fb7146102f1578063f496efa81461031c578063fd6673f514610347576100e8565b806353a2c19a146102075780635f1b0fd8146102325780636e04ff0d1461025d5780638e7ea5b21461029b576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063460e2049146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190610d0d565b60405180910390f35b34801561012457600080fd5b5061012d61039a565b60405161013a9190610d0d565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610ec1565b6103c3565b005b610174610483565b005b34801561018257600080fd5b5061018b6105f2565b6040516101989190610d0d565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610f78565b6105fc565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190610fc5565b6107e2565b6040516101fe9190611033565b60405180910390f35b34801561021357600080fd5b5061021c610891565b6040516102299190610d0d565b60405180910390f35b34801561023e57600080fd5b506102476108a0565b6040516102549190610d0d565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190611103565b6108ad565b6040516102929291906111e6565b60405180910390f35b3480156102a757600080fd5b506102b061096e565b6040516102bd9190611033565b60405180910390f35b3480156102d257600080fd5b506102db610998565b6040516102e89190610d0d565b60405180910390f35b3480156102fd57600080fd5b506103066109c0565b6040516103139190610d0d565b60405180910390f35b34801561032857600080fd5b506103316109e8565b60405161033e9190611275565b60405180910390f35b34801561035357600080fd5b5061035c610a10565b6040516103699190610d0d565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006001601c9054906101000a900460ff1660018111156103be576103bd611290565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161046c9291906112bf565b60405180910390fd5b61047f8282610a1c565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104dd576040517fa10e43c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104f1576104f0611290565b5b6001601c9054906101000a900460ff16600181111561051357610512611290565b5b1461054a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610616604051806020016040528060008152506108ad565b5090508061068557476000805490506001601c9054906101000a900460ff16600181111561064757610646611290565b5b6040517f43df4e3d00000000000000000000000000000000000000000000000000000000815260040161067c939291906112e8565b60405180910390fd5b600180601c6101000a81548160ff021916908360018111156106aa576106a9611290565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900467ffffffffffffffff1660037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161076a959493929190611397565b6020604051808303816000875af1158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906113ff565b9050807fc0acb560142e88bce39cf5cd1656ecc6992140c4ecb6fb9c662ec13c0b23cdac60405160405180910390a250505050565b600080600080548060200260200160405190810160405280929190818152602001828054801561086757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161081d575b505050505090508083815181106108815761088061142c565b5b6020026020010151915050919050565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060008060018111156108c6576108c5611290565b5b6001601c9054906101000a900460ff1660018111156108e8576108e7611290565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261091c919061148a565b1190506000806000805490501190506000804711905083801561093c5750825b80156109455750815b801561094e5750805b955085604051806020016040528060008152509550955050505050915091565b6000600160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000808054905082600081518110610a3757610a3661142c565b5b6020026020010151610a4991906114ed565b90506000808281548110610a6057610a5f61142c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001601c6101000a81548160ff02191690836001811115610af457610af3611290565b5b021790555042600281905550600067ffffffffffffffff811115610b1b57610b1a610d7e565b5b604051908082528060200260200182016040528015610b495781602001602082028036833780820191505090505b5060009080519060200190610b5f929190610c4d565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b869061154f565b60006040518083038185875af1925050503d8060008114610bc3576040519150601f19603f3d011682016040523d82523d6000602084013e610bc8565b606091505b5050905080610c03576040517f75073d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610cc6579160200282015b82811115610cc55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c6d565b5b509050610cd39190610cd7565b5090565b5b80821115610cf0576000816000905550600101610cd8565b5090565b6000819050919050565b610d0781610cf4565b82525050565b6000602082019050610d226000830184610cfe565b92915050565b6000604051905090565b600080fd5b600080fd5b610d4581610cf4565b8114610d5057600080fd5b50565b600081359050610d6281610d3c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610db682610d6d565b810181811067ffffffffffffffff82111715610dd557610dd4610d7e565b5b80604052505050565b6000610de8610d28565b9050610df48282610dad565b919050565b600067ffffffffffffffff821115610e1457610e13610d7e565b5b602082029050602081019050919050565b600080fd5b6000610e3d610e3884610df9565b610dde565b90508083825260208201905060208402830185811115610e6057610e5f610e25565b5b835b81811015610e895780610e758882610d53565b845260208401935050602081019050610e62565b5050509392505050565b600082601f830112610ea857610ea7610d68565b5b8135610eb8848260208601610e2a565b91505092915050565b60008060408385031215610ed857610ed7610d32565b5b6000610ee685828601610d53565b925050602083013567ffffffffffffffff811115610f0757610f06610d37565b5b610f1385828601610e93565b9150509250929050565b600080fd5b60008083601f840112610f3857610f37610d68565b5b8235905067ffffffffffffffff811115610f5557610f54610f1d565b5b602083019150836001820283011115610f7157610f70610e25565b5b9250929050565b60008060208385031215610f8f57610f8e610d32565b5b600083013567ffffffffffffffff811115610fad57610fac610d37565b5b610fb985828601610f22565b92509250509250929050565b600060208284031215610fdb57610fda610d32565b5b6000610fe984828501610d53565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101d82610ff2565b9050919050565b61102d81611012565b82525050565b60006020820190506110486000830184611024565b92915050565b600080fd5b600067ffffffffffffffff82111561106e5761106d610d7e565b5b61107782610d6d565b9050602081019050919050565b82818337600083830152505050565b60006110a66110a184611053565b610dde565b9050828152602081018484840111156110c2576110c161104e565b5b6110cd848285611084565b509392505050565b600082601f8301126110ea576110e9610d68565b5b81356110fa848260208601611093565b91505092915050565b60006020828403121561111957611118610d32565b5b600082013567ffffffffffffffff81111561113757611136610d37565b5b611143848285016110d5565b91505092915050565b60008115159050919050565b6111618161114c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a1578082015181840152602081019050611186565b60008484015250505050565b60006111b882611167565b6111c28185611172565b93506111d2818560208601611183565b6111db81610d6d565b840191505092915050565b60006040820190506111fb6000830185611158565b818103602083015261120d81846111ad565b90509392505050565b6000819050919050565b600061123b61123661123184610ff2565b611216565b610ff2565b9050919050565b600061124d82611220565b9050919050565b600061125f82611242565b9050919050565b61126f81611254565b82525050565b600060208201905061128a6000830184611266565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006040820190506112d46000830185611024565b6112e16020830184611024565b9392505050565b60006060820190506112fd6000830186610cfe565b61130a6020830185610cfe565b6113176040830184610cfe565b949350505050565b6000819050919050565b6113328161131f565b82525050565b600067ffffffffffffffff82169050919050565b61135581611338565b82525050565b600061ffff82169050919050565b6113728161135b565b82525050565b600063ffffffff82169050919050565b61139181611378565b82525050565b600060a0820190506113ac6000830188611329565b6113b9602083018761134c565b6113c66040830186611369565b6113d36060830185611388565b6113e06080830184611388565b9695505050505050565b6000815190506113f981610d3c565b92915050565b60006020828403121561141557611414610d32565b5b6000611423848285016113ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149582610cf4565b91506114a083610cf4565b92508282039050818111156114b8576114b761145b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114f882610cf4565b915061150383610cf4565b925082611513576115126114be565b5b828206905092915050565b600081905092915050565b50565b600061153960008361151e565b915061154482611529565b600082019050919050565b600061155a8261152c565b915081905091905056fea2646970667358221220557f9c7f9a7234d2b66bb824419052cd10023e1c979f523665bee8b59a59cb8c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1465,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1472,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_subscriptionId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 1484,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 8,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1487,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_RaffleState",
        "offset": 28,
        "slot": "1",
        "type": "t_enum(RaffleState)1460"
      },
      {
        "astId": 1489,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1460": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}